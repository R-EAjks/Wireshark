commit f52b53b340
Author: Gerald Combs <gerald@wireshark.org>
Date:   Mon Nov 15 14:53:46 2021 -0800

    Prep for 3.2.18.

commit 6c81395a59
Author: Gerald Combs <gerald@wireshark.org>
Date:   Sun Nov 14 16:35:30 2021 +0000

    [Automatic update for 2021-11-14]

    Update manuf, services enterprise numbers, translations, and other items.

commit 933de0dd45
Author: Dr. Lars Völker <lars.voelker@technica-engineering.de>
Date:   Tue Nov 9 18:53:48 2021 +0100

    MKA: MACsec SAK USE body length = 0 does not decode (BUGFIX)

    (cherry picked from commit 5b54bb2e0d5b23775d396d07a9004dbda9b5b31f)

commit a6c7073e7a
Author: João Valverde <j@v6e.pt>
Date:   Wed Nov 10 12:43:11 2021 +0000

    ftypes: Bugfix missing return statement

    (cherry picked from commit 084619088c4a05dc94a5d8548bbf947348a9c5ff)

commit 4aa06c6254
Author: João Valverde <j@v6e.pt>
Date:   Wed Nov 10 15:43:01 2021 +0000

    ftypes: Bugfix a buffer size

    The 'size' variable is not the size of the 'mantissa_str' buffer.
    'size' is the output buffer size, sizeof(mantissa_str) is fixed
    at 8 bytes.

    (cherry picked from commit 7630577ffa37b0928d4e16603e7c2bb515dea259)

commit abc1017490
Author: Jaap Keuter <jaap.keuter@xs4all.nl>
Date:   Wed Nov 10 11:06:46 2021 +0100

    TCP: always return a free-able string buffer

    Closes #17722

    (cherry picked from commit 4010799cb303333ea09ac124d817a51dfa6a2967)

commit 0f41182cde
Author: Gerald Combs <gerald@wireshark.org>
Date:   Sat Nov 6 13:52:01 2021 -0700

    UAT: Allow extra fields.

    If we encounter unexpected extra fields on a line, simply log a warning
    and continue instead of returning an error. This allows forward
    compatibility when we add a field to a UAT. We end up throwing away the
    extra fields, but it's better than resetting the entire UAT. Fixes the
    forward compatibility issue described in #17623.

    (cherry picked from commit 846b17ee9a5398d94da4aa465f8d5f462914b6c6)

    Conflicts:
            epan/uat_load.l
            ws_log_defs.h

commit c510b822a7
Author: Gerald Combs <gerald@wireshark.org>
Date:   Sun Nov 7 16:36:40 2021 +0000

    [Automatic update for 2021-11-07]

    Update manuf, services enterprise numbers, translations, and other items.

commit 9e453dd59e
Author: Gerald Combs <gerald@wireshark.org>
Date:   Mon Nov 1 11:12:56 2021 -0700

    Modbus: Add null pointer checks.

    Fixes #17703.

    (cherry picked from commit bb41b6619210d998f1abacc43ee20acc985249a4)

commit 8f6d0c79bf
Author: Gerald Combs <gerald@wireshark.org>
Date:   Mon Nov 1 10:57:16 2021 -0700

    802.11 Radio: Add null pointer checks.

    Fixes #17704.

    (cherry picked from commit 0b473c01ab38e3b7debeeb4df82423fe53d0ff54)

commit c972d7aede
Author: Gerald Combs <gerald@wireshark.org>
Date:   Sun Oct 31 16:34:50 2021 +0000

    [Automatic update for 2021-10-31]

    Update manuf, services enterprise numbers, translations, and other items.

commit 9a1ef88cf4
Author: Gerald Combs <gerald@wireshark.org>
Date:   Tue Oct 26 18:15:50 2021 -0700

    C12.22: Track our allocation sizes.

    Add an allocated size element to the TOP_ELEMENT_CONTROL struct and use
    it to make sure we're not trying to read past the end of a buffer in
    canonify_unencrypted_header. Fixes #17636.

    (cherry picked from commit b760c356c7050f75faa5421d6812ab312b8651a1)

    Conflicts:
            epan/dissectors/asn1/c1222/packet-c1222-template.c
            epan/dissectors/packet-c1222.c

commit 98056d8f09
Author: Gerald Combs <gerald@wireshark.org>
Date:   Mon Oct 11 13:00:50 2021 -0700

    BT-DHT: Exit a loop.

    Always make sure our offset advances in dissect_bencoded_list.
    Fixes #17651.

    (cherry picked from commit ed98abe2080053403f1881a8b2df1905a3ccdf2e)

commit ae45fcd60e
Author: Gerald Combs <gerald@wireshark.org>
Date:   Wed Oct 13 10:16:58 2021 -0700

    BT SDP: Don't overrun our continuation state buffer.

    Fixes #17635.

    (cherry picked from commit e15e987468ca5edcab0ccde70e7bea622783403e)

    Conflicts:
            epan/dissectors/packet-btsdp.c

commit 2f017bb756
Author: Gerald Combs <gerald@wireshark.org>
Date:   Mon Oct 25 18:29:08 2021 -0700

    BT-DHT: Fix another loop and add NULL checks.

    Make sure dissect_bt_dht_values even when we have a zero-length string.
    Add a couple of NULL checks. Fixes #17677.

    (cherry picked from commit 79a9fe1cf0d6bcc821f2d56b130c80c9052b5c58)

     Conflicts:
            epan/dissectors/packet-bt-dht.c

commit 81b5d29ca4
Author: Gerald Combs <gerald@wireshark.org>
Date:   Tue Oct 26 09:57:23 2021 -0700

    PNRP: Exit our main loop.

    Make sure our main loop offset advances. Fixes #17684.

    (cherry picked from commit 9104a3744e63b54b2cff3152aedeea340976355b)

commit 4b454c3fe6
Author: Gerald Combs <gerald@wireshark.org>
Date:   Sun Oct 24 20:03:11 2021 +0000

    [Automatic update for 2021-10-24]

    Update manuf, services enterprise numbers, translations, and other items.

commit 5a2b2e50c6
Author: Peter Wu <peter@lekensteyn.nl>
Date:   Thu Jul 9 23:31:46 2020 +0200

    tls: Update list of CT logs to 2020-05-29

    Avoid string literals while at it to avoid -Wpointer-sign warnings with
    GCC 10. This has the additional benefit of avoiding storing the trailing
    NUL byte after the data, resulting in a tiny reduction in binary size.
    This compound literal syntax is supported since C99 which is permitted
    by doc/README.developer.

    Change-Id: I35f4d3a46aa78e12915d92136f1de0891131bede
    Reviewed-on: https://code.wireshark.org/review/37818
    Petri-Dish: Peter Wu <peter@lekensteyn.nl>
    Tested-by: Petri Dish Buildbot
    Reviewed-by: Anders Broman <a.broman58@gmail.com>
    (cherry picked from commit 1cbaaf3e8dbaaaa36dad33480f5c0fcaaa808912)

commit fa8f903ccb
Author: Peter Wu <peter@lekensteyn.nl>
Date:   Wed Jan 29 14:46:09 2020 +0000

    tls: update list of known CT logs to 2019-12-23

    The old URL was gone and the JSON scheme has changed, so update the
    generator accordingly.

    Change-Id: I52ae27c7fc7dc0100e8abaa7b95b1769a7413bc6
    Reviewed-on: https://code.wireshark.org/review/35983
    Petri-Dish: Peter Wu <peter@lekensteyn.nl>
    Tested-by: Petri Dish Buildbot
    Reviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>
    (cherry picked from commit e0ca87cfb11de33de44e35e013c7ce26203fdaaa)

commit 0cf6bcdaaf
Author: Pau Espin Pedrol <pespin@sysmocom.de>
Date:   Wed Oct 20 17:22:58 2021 +0200

    csn1: Avoid storing existence bit as true if content was actually NULL

    If we decode Exist bit as "1" but we are at the end of the message, and
    all the Next items we'd read are expected to be possibly NULL, then swap
    the Exist bit in the decoded structure as "0" in order to tell the
    decoder user that the related information structure is actually unset,
    as if "0" was received.

    This patch is a port from patch fixing same issue in the osmo-pcu.git copy of
    csn1 decoder:
    https://git.osmocom.org/osmo-pcu/commit/?id=1859ec38cc4f4e3788e495a100fdec3787d25020
    And fixup patch for that one:
    https://git.osmocom.org/osmo-pcu/commit/?id=9ecdc11eb6b983748ae2fd6a1d07849c8106826f

    (cherry picked from commit 1dfb3edac1ce92d3462be6cddfdb59c61550dc3b)

commit d0fa8a8b6b
Author: Pau Espin Pedrol <pespin@sysmocom.de>
Date:   Wed Oct 20 16:50:29 2021 +0200

    csn1: Avoid failing if optional DownlinkDualCarrierCapability_r7 is missing

    All additional release fields in RadioAccesCapabilities are considered
    optional, and the CSN_DESCR for Content_t already marks almost all as such,
    except DownlinkDualCarrierCapability_r7.

    It has been found that some MS transmits a MS RA Capability with a Length=61 bits
    where the last bit in the buffer is setting the Exist bit for
    DownlinkDualCarrierCapability_r7 as 1. Hence, the CSN1 decoder failed to
    decode the whole message because it expected to keep reading there
    despite there's no more bytes to read.

    While this is could actually be considered an MS bug, let's relax our
    expectancies and simply consider the case { 1 <end> } as it was { 0 },
    and mark skip decoding DownlinkDualCarrierCapability_r7. That what
    wireshark (packet-gsm_a_gsm.c) or pycrate do for instance.

    This patch itself doesn't fix the problem where actually the Exist bit
    is stored as 1 in the output decoded structure, but simply allows keep
    ongoing with decoding until the end. This issue will be fixed in a
    follow-up patch.

    This patch is a port from patch fixing same issue in the osmo-pcu.git copy of
    csn1 decoder:
    https://git.osmocom.org/osmo-pcu/commit/?id=ebdc0d8c170ee2dbf23b19056d6c2d0ef316b3c2

    (cherry picked from commit 6ba9c7b91899700b7e34bac97b6f1b848a541c27)

commit b691c68625
Author: Nan Xiao <nan@chinadtrace.org>
Date:   Wed Oct 20 09:32:13 2021 +0800

    EVS: Fix bug in decoding SID frame CNG type

    In 3GPP 26.449 Codec for Enhanced Voice Services (EVS); Comfort Noise Generation
    (CNG) aspects, Computational details and bit allocation:
    For the EVS primary modes, the SID payload consists of 48 bits. The first bit of
    the payload determines the CNG scheme, where 0 stands for the LP-CNG and 1 for
    the FD-CNG.

    (cherry picked from commit 0818981ccbe2d00f2464a1ab31ec70ec1192d933)

commit ac07587963
Author: Guy Harris <gharris@sonic.net>
Date:   Mon Oct 18 18:11:31 2021 -0700

    socketcan: use ett_can_fd for CAN FD.

    (cherry picked from commit f275ccf2ab5bbb3f1ba2bd99aa1f4cff0c69f144)

commit 807d7e1873
Author: Guy Harris <gharris@sonic.net>
Date:   Thu Oct 14 19:15:07 2021 -0700

    socketcan: support the CANFD_FDF flag for identifying CAN FD frames.

    The Linux SocketCAN header now uses the formerly-reserved byte in the
    SocketCAN header after the "payload length" field as an "FD flags"
    field, with a flag bit reserved to indicate whether the frame is a
    classic CAN frame or a CAN FD frame, with two other bits giving frame
    information for FD frames.

    For LINKTYPE_CAN_SOCKETCAN, use that flag bit to determine whether the
    frame is classic CAN or CAN FD.  As some older LINKTYPE_CAN_SOCKETCAN
    captures have SocketCAN headers in which the fields after the "payload
    length" field were uninitialized, so trust that thge "FD flags" was
    filled in, rather than possibly randomly uninitialized, only if the only
    bits set in that field are the bits defined to be in that field and the
    two reserved bytes after it are zero.

    This will be needed when the current main-branch libpcap is released, as
    it uses LINKTYPE_CAN_SOCKETCAN rather than LINKTYPE_LINUX_SLL for
    ARPHRD_CAN devices; we add it now to future-proof the Wireshark releases
    to which this is being committed.  It also handles what existing CAN FD
    captures using LINKTYPE_CAN_SOCKETCAN exist.

    For LINKTYPE_LINUX_SLL frames, we have the protocol field to distinguish
    between classic CAN and CAN FD, so we use that to determine the frame
    type, rather than looking at the CANFD_FDF flag.

    dissect_socketcan_common() now handles both classic CAN and CAN FD
    frames.

    (backported from commit 39604740898f01fbed0777d3f9b8948bf23ec34a)

commit b69ae67960
Author: Nan Xiao <nan@chinadtrace.org>
Date:   Tue Oct 19 14:46:38 2021 +0800

    EVS: Fix CNG schema for SID payload

    In 3GPP 26.449 Codec for Enhanced Voice Services (EVS); Comfort Noise Generation
    (CNG) aspects, Computational details and bit allocation:
    For the EVS primary modes, the SID payload consists of 48 bits. The first bit of
    the payload determines the CNG scheme, where 0 stands for the LP-CNG and 1 for
    the FD-CNG.

    (cherry picked from commit 9a8feb8abd84366ca009c56ae3aa67a62e03dee7)

commit 59f7ea8374
Author: Pau Espin Pedrol <pespin@sysmocom.de>
Date:   Tue Oct 19 15:43:48 2021 +0200

    CSN.1: Fix definition for DownlinkDualCarrierCapability_r7_t in MS RA cap

    Related spec: 3GPP TS 24.008 Table 10.5.146

    (cherry picked from commit 736a54a3ad6c23229a44f8a8506b57c5d5672538)

commit 5494000349
Author: Pascal Quantin <pascal@wireshark.org>
Date:   Tue Oct 19 11:47:00 2021 +0200

    BSSMAP LE: fix dissection of APDU in 2 messages

    The APDU information element in Perform Location Request and Perform
    Location Information messages is optional and not mandatory, as seen in
    3GPP 49.031. This commit fixes a regression introduced in ga6ed603f5c.

    Closes #17667

    (cherry picked from commit 017eb216c172919ec82eee90cfb43e976d4898f4)

commit 80c02653c4
Author: Gerald Combs <gerald@wireshark.org>
Date:   Sun Oct 17 10:43:29 2021 +0000

    [Automatic update for 2021-10-17]

    Update manuf, services enterprise numbers, translations, and other items.

commit f271493937
Author: Guy Harris <gharris@sonic.net>
Date:   Wed Oct 13 17:18:50 2021 -0700

    dumpcap: do all packet counting in capture_loop_wrote_one_packet().

    We need to update global_ld.inpkts_to_sync_pipe as soon as we've written
    a packet to the current capture file.  If we're writing to multiple
    files, then, if we delay counting until after we switch to another file,
    the packet-count message we send to the parent before switching won't
    include the packet, and the first packet-count message we send to the
    parent *after* switching *will* include the packet, which could mean the
    parent will try to read more packets than there are in the new file, in
    which case it'll get an EOF and, at least in the case of TShark, treat
    that as an error and stop capturing.

    This should fix issue #17654.

    While we're at it, don't send a "we have no packets" packet-count
    message even for the packet-count message we send just before switching
    files.

    (cherry picked from commit 79920cbc5fa679d18f12b71fddba20a119849a3f)

commit d492abfc3c
Author: Chuck Craft <bubbasnmp@gmail.com>
Date:   Sat Mar 13 18:28:14 2021 -0600

    dumpcap: double received count when using threads

    Closes #17089

    (cherry picked from commit fefad2e7cfca011ce91beb0db01add6a7a396c33)

commit 7ba3c9f83f
Author: Gerald Combs <gerald@wireshark.org>
Date:   Sun Oct 10 10:18:07 2021 +0000

    [Automatic update for 2021-10-10]

    Update manuf, services enterprise numbers, translations, and other items.

commit ae21696aa0
Author: Michal Ruprich <michalruprich@gmail.com>
Date:   Wed Feb 10 15:32:18 2021 +0100

    Moving glib.h out of extern C

    (cherry picked from commit c8246c99737c7a844f45eb0e777382cc68397d17)

commit 0e3747c643
Author: Guy Harris <gharris@sonic.net>
Date:   Tue Mar 16 13:50:13 2021 -0700

    Move still *more* headers outside of extern "C".

    If a header declares a function, or anything else requiring the extern
    "C" decoration, have it wrap the declaration itself; don't rely on the
    header itself being included inside extern "C".

    (cherry picked from commit 2820156fbd4b0213ca015216d8cd97c31b503c8c)

commit 7004d4fc86
Author: Guy Harris <gharris@sonic.net>
Date:   Tue Mar 16 02:36:10 2021 -0700

    Move more headers outside extern "C".

    If a header declares a function, or anything else requiring the extern
    "C" decoration, have it wrap the declaration itself; don't rely on the
    header itself being included inside extern "C".

    (cherry picked from commit 1e1f4e6b5f9a309cef55d4459c8bba40d6acc104)

commit b22ebf2819
Author: João Valverde <j@v6e.pt>
Date:   Thu Oct 7 19:05:41 2021 +0100

    dfilter: Fix parsing of octal character escape sequences

    Octal escape sequences \NNN can have between 1 and 3 digits. If
    the sequence had less than 3 digits the parser got out of sync
    with an incorrect double increment of the pointer and errors out
    parsing sequences like \0, \2 or \33.

    Before:
      Filter: ip.proto == '\33'
      dftest: "'\33'" is too long to be a valid character constant.

    After:
      Filter: ip.proto == '\33'

      Constants:
      00000 PUT_FVALUE      27 <FT_UINT8> -> reg#1

      Instructions:
      00000 READ_TREE               ip.proto -> reg#0
      00001 IF-FALSE-GOTO   3
      00002 ANY_EQ          reg#0 == reg#1
      00003 RETURN

    Fixes #16525.

    (cherry picked from commit 9dab2280cadef3723cd81d036d526311f133891b)

commit befae6ccf1
Author: Gerald Combs <gerald@wireshark.org>
Date:   Wed Oct 6 12:36:21 2021 -0700

    Version: 3.2.17 → 3.2.18

    [skip ci]
